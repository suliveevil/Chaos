/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject2(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject2(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject: isObject2,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function AxiosError(message, code, config, request2, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request2 && (this.request = request2);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request2, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request2, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module2.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module2.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError("Request failed with status code " + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module2.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module2) {
    "use strict";
    module2.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request2 = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request2.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request2.timeout = config.timeout;
        function onloadend() {
          if (!request2) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders(request2.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
          var response = {
            data: responseData,
            status: request2.status,
            statusText: request2.statusText,
            headers: responseHeaders,
            config,
            request: request2
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request2 = null;
        }
        if ("onloadend" in request2) {
          request2.onloadend = onloadend;
        } else {
          request2.onreadystatechange = function handleLoad() {
            if (!request2 || request2.readyState !== 4) {
              return;
            }
            if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request2.onabort = function handleAbort() {
          if (!request2) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request2));
          request2 = null;
        };
        request2.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request2, request2));
          request2 = null;
        };
        request2.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request2));
          request2 = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request2) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request2.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request2.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request2.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request2.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request2.upload) {
          request2.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request2) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request2.abort();
            request2 = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request2.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module2) {
    module2.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator2 === false) {
          throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator2 = schema[opt];
        if (validator2) {
          var value = options[opt];
          var result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator2 = require_validator();
    var validators = validator2.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request2(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator2.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.CanceledError = require_CanceledError();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.toFormData = require_toFormData();
    axios2.AxiosError = require_AxiosError();
    axios2.Cancel = axios2.CanceledError;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// main.ts
__export(exports, {
  default: () => TranslatorPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// utils.ts
var import_obsidian = __toModule(require("obsidian"));

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// utils.ts
var import_axios = __toModule(require_axios2());

// md5.js
var MD5 = function(string) {
  function RotateLeft(lValue, iShiftBits) {
    return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
  }
  function AddUnsigned(lX, lY) {
    let lX4, lY4, lX8, lY8, lResult;
    lX8 = lX & 2147483648;
    lY8 = lY & 2147483648;
    lX4 = lX & 1073741824;
    lY4 = lY & 1073741824;
    lResult = (lX & 1073741823) + (lY & 1073741823);
    if (lX4 & lY4) {
      return lResult ^ 2147483648 ^ lX8 ^ lY8;
    }
    if (lX4 | lY4) {
      if (lResult & 1073741824) {
        return lResult ^ 3221225472 ^ lX8 ^ lY8;
      } else {
        return lResult ^ 1073741824 ^ lX8 ^ lY8;
      }
    } else {
      return lResult ^ lX8 ^ lY8;
    }
  }
  function F(x2, y, z) {
    return x2 & y | ~x2 & z;
  }
  function G(x2, y, z) {
    return x2 & z | y & ~z;
  }
  function H(x2, y, z) {
    return x2 ^ y ^ z;
  }
  function I(x2, y, z) {
    return y ^ (x2 | ~z);
  }
  function FF(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(F(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function GG(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(G(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function HH(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(H(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function II(a2, b2, c2, d2, x2, s, ac) {
    a2 = AddUnsigned(a2, AddUnsigned(AddUnsigned(I(b2, c2, d2), x2), ac));
    return AddUnsigned(RotateLeft(a2, s), b2);
  }
  function ConvertToWordArray(string2) {
    let lWordCount;
    const lMessageLength = string2.length;
    const lNumberOfWords_temp1 = lMessageLength + 8;
    const lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
    const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
    const lWordArray = Array(lNumberOfWords - 1);
    let lBytePosition = 0;
    let lByteCount = 0;
    while (lByteCount < lMessageLength) {
      lWordCount = (lByteCount - lByteCount % 4) / 4;
      lBytePosition = lByteCount % 4 * 8;
      lWordArray[lWordCount] = lWordArray[lWordCount] | string2.charCodeAt(lByteCount) << lBytePosition;
      lByteCount++;
    }
    lWordCount = (lByteCount - lByteCount % 4) / 4;
    lBytePosition = lByteCount % 4 * 8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
    return lWordArray;
  }
  function WordToHex(lValue) {
    let WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
    for (lCount = 0; lCount <= 3; lCount++) {
      lByte = lValue >>> lCount * 8 & 255;
      WordToHexValue_temp = "0" + lByte.toString(16);
      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
    }
    return WordToHexValue;
  }
  function Utf8Encode(string2) {
    string2 = string2.replace(/\r\n/g, "\n");
    let utftext = "";
    for (let n = 0; n < string2.length; n++) {
      const c2 = string2.charCodeAt(n);
      if (c2 < 128) {
        utftext += String.fromCharCode(c2);
      } else if (c2 > 127 && c2 < 2048) {
        utftext += String.fromCharCode(c2 >> 6 | 192);
        utftext += String.fromCharCode(c2 & 63 | 128);
      } else {
        utftext += String.fromCharCode(c2 >> 12 | 224);
        utftext += String.fromCharCode(c2 >> 6 & 63 | 128);
        utftext += String.fromCharCode(c2 & 63 | 128);
      }
    }
    return utftext;
  }
  let x = [];
  let k, AA, BB, CC, DD, a, b, c, d;
  const S11 = 7, S12 = 12, S13 = 17, S14 = 22;
  const S21 = 5, S22 = 9, S23 = 14, S24 = 20;
  const S31 = 4, S32 = 11, S33 = 16, S34 = 23;
  const S41 = 6, S42 = 10, S43 = 15, S44 = 21;
  string = Utf8Encode(string);
  x = ConvertToWordArray(string);
  a = 1732584193;
  b = 4023233417;
  c = 2562383102;
  d = 271733878;
  for (k = 0; k < x.length; k += 16) {
    AA = a;
    BB = b;
    CC = c;
    DD = d;
    a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
    d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
    c = FF(c, d, a, b, x[k + 2], S13, 606105819);
    b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
    a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
    d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
    c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
    b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
    a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
    d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
    c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
    b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
    a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
    d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
    c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
    b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
    a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
    d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
    c = GG(c, d, a, b, x[k + 11], S23, 643717713);
    b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
    a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
    d = GG(d, a, b, c, x[k + 10], S22, 38016083);
    c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
    b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
    a = GG(a, b, c, d, x[k + 9], S21, 568446438);
    d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
    c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
    b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
    a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
    d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
    c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
    b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
    a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
    d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
    c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
    b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
    a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
    d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
    c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
    b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
    a = HH(a, b, c, d, x[k + 13], S31, 681279174);
    d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
    c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
    b = HH(b, c, d, a, x[k + 6], S34, 76029189);
    a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
    d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
    c = HH(c, d, a, b, x[k + 15], S33, 530742520);
    b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
    a = II(a, b, c, d, x[k + 0], S41, 4096336452);
    d = II(d, a, b, c, x[k + 7], S42, 1126891415);
    c = II(c, d, a, b, x[k + 14], S43, 2878612391);
    b = II(b, c, d, a, x[k + 5], S44, 4237533241);
    a = II(a, b, c, d, x[k + 12], S41, 1700485571);
    d = II(d, a, b, c, x[k + 3], S42, 2399980690);
    c = II(c, d, a, b, x[k + 10], S43, 4293915773);
    b = II(b, c, d, a, x[k + 1], S44, 2240044497);
    a = II(a, b, c, d, x[k + 8], S41, 1873313359);
    d = II(d, a, b, c, x[k + 15], S42, 4264355552);
    c = II(c, d, a, b, x[k + 6], S43, 2734768916);
    b = II(b, c, d, a, x[k + 13], S44, 1309151649);
    a = II(a, b, c, d, x[k + 4], S41, 4149444226);
    d = II(d, a, b, c, x[k + 11], S42, 3174756917);
    c = II(c, d, a, b, x[k + 2], S43, 718787259);
    b = II(b, c, d, a, x[k + 9], S44, 3951481745);
    a = AddUnsigned(a, AA);
    b = AddUnsigned(b, BB);
    c = AddUnsigned(c, CC);
    d = AddUnsigned(d, DD);
  }
  const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
  return temp.toLowerCase();
};

// utils.ts
var noticeHandler = (msg) => new import_obsidian.Notice(msg);
function truncate(q) {
  const len = q.length;
  if (len <= 20)
    return q;
  return q.substring(0, 10) + len + q.substring(len - 10, len);
}
function getRequest(url, cb) {
  (0, import_obsidian.request)({
    method: "get",
    url
  }).then(function(response) {
    cb(JSON.parse(response || "{}"));
  }).catch(function(error) {
    noticeHandler(error.message || "No results!");
  });
}
function handleTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const salt = new Date().getTime();
    const curtime = Math.round(new Date().getTime() / 1e3);
    const str1 = config.appId + truncate(q) + salt + curtime + config.secretKey;
    const hashBuffer = yield crypto.subtle.digest("SHA-256", new TextEncoder().encode(str1));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const sign = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
    const from = config.from || "auto";
    const params = { q, appKey: config.appId, salt, from, to: config.to, sign, curtime, signType: "v3" };
    const query = Object.keys(params).map((key) => `${key}=${params[key]}`).join("&");
    getRequest(`https://openapi.youdao.com/api?${query}`, cb);
  });
}
function handleMicrosoftTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const endpoint = "https://api-apc.cognitive.microsofttranslator.com";
    const { from = "en", to, secretKey, location } = config;
    (0, import_axios.default)({
      url: `${endpoint}/translate?api-version=3.0&from=${from}&to=${to}&includeAlignment=true&textType=html`,
      method: "post",
      headers: {
        "Ocp-Apim-Subscription-Key": secretKey,
        "Ocp-Apim-Subscription-Region": location,
        "Content-type": "application/json",
        "X-ClientTraceId": v4_default().toString()
      },
      data: [{ text: q }],
      responseType: "json"
    }).then(({ data }) => {
      const res = (data || []).reduce((str, item) => {
        const { translations = [] } = item;
        return str + translations.map(({ text }) => text).join(", ");
      }, "");
      cb(res);
    }).catch((e) => {
      noticeHandler("Network Error!");
    });
  });
}
function handleBaiduTranslate(q, config, cb) {
  return __async(this, null, function* () {
    const { to, from, appId, secretKey } = config;
    const salt = new Date().getTime();
    const sign = MD5(`${appId}${q}${salt}${secretKey}`);
    getRequest(`http://api.fanyi.baidu.com/api/trans/vip/translate?q=${q}&from=${from || "en"}&to=${to || "zh"}&appid=${appId}&salt=${salt}&sign=${sign}`, cb);
  });
}
function handleAudio(url, cb) {
  (0, import_obsidian.requestUrl)({ method: "post", url }).then((res) => {
    cb(res);
  }).catch(function(error) {
    noticeHandler(error.message || "No results!");
  });
}
var LANGUAGES = {
  \u7B80\u4F53\u4E2D\u6587: "zh-CHS",
  \u7E41\u4F53\u4E2D\u6587: "zh-CHT",
  \u82F1\u6587: "en",
  \u65E5\u6587: "ja",
  \u97E9\u6587: "ko",
  \u6CD5\u6587: "fr",
  \u897F\u73ED\u7259\u6587: "es",
  \u8461\u8404\u7259\u6587: "pt",
  \u610F\u5927\u5229\u6587: "it",
  \u4FC4\u6587: "ru",
  \u8D8A\u5357\u6587: "vi",
  \u5FB7\u6587: "de",
  \u963F\u62C9\u4F2F\u6587: "ar",
  \u5370\u5C3C\u6587: "id",
  \u5357\u975E\u8377\u5170\u8BED: "af",
  \u6CE2\u65AF\u5C3C\u4E9A\u8BED: "bs",
  \u4FDD\u52A0\u5229\u4E9A\u8BED: "bg",
  \u4E2D\u6587\u7CA4\u8BED: "yue",
  \u52A0\u6CF0\u9686\u8BED: "ca",
  \u514B\u7F57\u5730\u4E9A\u8BED: "hr",
  \u6377\u514B\u8BED: "cs",
  \u4E39\u9EA6\u8BED: "da",
  \u8377\u5170\u8BED: "nl",
  \u7231\u6C99\u5C3C\u4E9A\u8BED: "et",
  \u6590\u6D4E\u8BED: "fj",
  \u82AC\u5170\u8BED: "fi",
  \u5E0C\u814A\u8BED: "el",
  \u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED: "ht",
  \u5E0C\u4F2F\u6765\u8BED: "he",
  \u5370\u5730\u8BED: "hi",
  \u767D\u82D7\u8BED: "mww",
  \u5308\u7259\u5229\u8BED: "hu",
  \u65AF\u74E6\u5E0C\u91CC\u8BED: "sw",
  \u514B\u6797\u8D21\u8BED: "tlh",
  \u62C9\u8131\u7EF4\u4E9A\u8BED: "lv",
  \u7ACB\u9676\u5B9B\u8BED: "lt",
  \u9A6C\u6765\u8BED: "ms",
  \u9A6C\u8033\u4ED6\u8BED: "mt",
  \u632A\u5A01\u8BED: "no",
  \u6CE2\u65AF\u8BED: "fa",
  \u6CE2\u5170\u8BED: "pl",
  \u514B\u96F7\u5854\u7F57\u5965\u6258\u7C73\u8BED: "otq",
  \u7F57\u9A6C\u5C3C\u4E9A\u8BED: "ro",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u897F\u91CC\u5C14\u6587)": "sr-Cyrl",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED(\u62C9\u4E01\u6587)": "sr-Latn",
  \u65AF\u6D1B\u4F10\u514B\u8BED: "sk",
  \u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED: "sl",
  \u745E\u5178\u8BED: "sv",
  \u5854\u5E0C\u63D0\u8BED: "ty",
  \u6CF0\u8BED: "th",
  \u6C64\u52A0\u8BED: "to",
  \u571F\u8033\u5176\u8BED: "tr",
  \u4E4C\u514B\u5170\u8BED: "uk",
  \u4E4C\u5C14\u90FD\u8BED: "ur",
  \u5A01\u5C14\u58EB\u8BED: "cy",
  \u5C24\u5361\u5766\u739B\u96C5\u8BED: "yua",
  \u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED: "sq",
  \u963F\u59C6\u54C8\u62C9\u8BED: "am",
  \u4E9A\u7F8E\u5C3C\u4E9A\u8BED: "hy",
  \u963F\u585E\u62DC\u7586\u8BED: "az",
  \u5B5F\u52A0\u62C9\u8BED: "bn",
  \u5DF4\u65AF\u514B\u8BED: "eu",
  \u767D\u4FC4\u7F57\u65AF\u8BED: "be",
  \u5BBF\u52A1\u8BED: "ceb",
  \u79D1\u897F\u5609\u8BED: "co",
  \u4E16\u754C\u8BED: "eo",
  \u83F2\u5F8B\u5BBE\u8BED: "tl",
  \u5F17\u91CC\u897F\u8BED: "fy",
  \u52A0\u5229\u897F\u4E9A\u8BED: "gl",
  \u683C\u9C81\u5409\u4E9A\u8BED: "ka",
  \u53E4\u5409\u62C9\u7279\u8BED: "gu",
  \u8C6A\u8428\u8BED: "ha",
  \u590F\u5A01\u5937\u8BED: "haw",
  \u51B0\u5C9B\u8BED: "is",
  \u4F0A\u535A\u8BED: "ig",
  \u7231\u5C14\u5170\u8BED: "ga",
  \u722A\u54C7\u8BED: "jw",
  \u5361\u7EB3\u8FBE\u8BED: "kn",
  \u54C8\u8428\u514B\u8BED: "kk",
  \u9AD8\u68C9\u8BED: "km",
  \u5E93\u5C14\u5FB7\u8BED: "ku",
  \u67EF\u5C14\u514B\u5B5C\u8BED: "ky",
  \u8001\u631D\u8BED: "lo",
  \u62C9\u4E01\u8BED: "la",
  \u5362\u68EE\u5821\u8BED: "lb",
  \u9A6C\u5176\u987F\u8BED: "mk",
  \u9A6C\u5C14\u52A0\u4EC0\u8BED: "mg",
  \u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED: "ml",
  \u6BDB\u5229\u8BED: "mi",
  \u9A6C\u62C9\u5730\u8BED: "mr",
  \u8499\u53E4\u8BED: "mn",
  \u7F05\u7538\u8BED: "my",
  \u5C3C\u6CCA\u5C14\u8BED: "ne",
  \u9F50\u5207\u74E6\u8BED: "ny",
  \u666E\u4EC0\u56FE\u8BED: "ps",
  \u65C1\u906E\u666E\u8BED: "pa",
  \u8428\u6469\u4E9A\u8BED: "sm",
  \u82CF\u683C\u5170\u76D6\u5C14\u8BED: "gd",
  \u585E\u7D22\u6258\u8BED: "st",
  \u4FEE\u7EB3\u8BED: "sn",
  \u4FE1\u5FB7\u8BED: "sd",
  \u50E7\u4F3D\u7F57\u8BED: "si",
  \u7D22\u9A6C\u91CC\u8BED: "so",
  \u5DFD\u4ED6\u8BED: "su",
  \u5854\u5409\u514B\u8BED: "tg",
  \u6CF0\u7C73\u5C14\u8BED: "ta",
  \u6CF0\u5362\u56FA\u8BED: "te",
  \u4E4C\u5179\u522B\u514B\u8BED: "uz",
  \u5357\u975E\u79D1\u8428\u8BED: "xh",
  \u610F\u7B2C\u7EEA\u8BED: "yi",
  \u7EA6\u9C81\u5DF4\u8BED: "yo",
  \u5357\u975E\u7956\u9C81\u8BED: "zu",
  \u81EA\u52A8\u8BC6\u522B: "auto"
};
var MICROSOFT_LANGUAGES = {
  "\u5357\u975E\u8377\u5170\u8BED": "af",
  "\u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED": "sq",
  "\u963F\u59C6\u54C8\u62C9\u8BED": "am",
  "\u963F\u62C9\u4F2F\u8BED": "ar",
  "\u4E9A\u7F8E\u5C3C\u4E9A\u8BED": "hy",
  "\u963F\u8428\u59C6\u8BED": "as",
  "\u963F\u585E\u62DC\u7586\u8BED(\u62C9\u4E01\u8BED)": "az",
  "Bangla": "bn",
  "\u5DF4\u4EC0\u57FA\u5C14\u8BED": "ba",
  "\u5DF4\u65AF\u514B\u8BED": "eu",
  "\u6CE2\u65AF\u5C3C\u4E9A\u8BED(\u62C9\u4E01\u8BED\u7CFB)": "bs",
  "\u4FDD\u52A0\u5229\u4E9A\u8BED": "bg",
  "\u4E2D\u6587\u7CA4\u8BED": "yue",
  "\u52A0\u6CF0\u7F57\u5C3C\u4E9A\u8BED": "ca",
  "\u4E2D\u6587\u6587\u5B66": "lzh",
  "\u7B80\u4F53\u4E2D\u6587": "zh-Hans",
  "\u7E41\u4F53\u4E2D\u6587": "zh-Hant",
  "\u514B\u7F57\u5730\u4E9A\u8BED": "hr",
  "\u6377\u514B\u8BED": "cs",
  "\u4E39\u9EA6\u8BED": "da",
  "\u8FBE\u91CC\u8BED": "prs",
  "\u9A6C\u5C14\u4EE3\u592B\u8BED": "dv",
  "\u8377\u5170\u8BED": "nl",
  "\u82F1\u8BED": "en",
  "\u7231\u6C99\u5C3C\u4E9A\u8BED": "et",
  "\u6CD5\u7F57\u8BED": "fo",
  "\u6590\u6D4E\u8BED": "fj",
  "\u83F2\u5F8B\u5BBE\u8BED": "fil",
  "\u82AC\u5170\u8BED": "fi",
  "\u6CD5\u8BED": "fr",
  "\u6CD5\u8BED\uFF08\u52A0\u62FF\u5927\uFF09": "fr-ca",
  "\u52A0\u5229\u897F\u4E9A\u8BED": "gl",
  "\u683C\u9C81\u5409\u4E9A\u8BED": "ka",
  "\u5FB7\u8BED": "de",
  "\u5E0C\u814A\u8BED": "el",
  "\u53E4\u5409\u62C9\u7279\u8BED": "gu",
  "\u6D77\u5730\u514B\u91CC\u5965\u5C14\u8BED": "ht",
  "\u5E0C\u4F2F\u6765\u8BED": "he",
  "Hindi": "hi",
  "\u767D\u82D7\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "mww",
  "\u5308\u7259\u5229\u8BED": "hu",
  "\u51B0\u5C9B\u8BED": "is",
  "\u5370\u5EA6\u5C3C\u897F\u4E9A\u8BED": "id",
  "\u56E0\u7EBD\u7EB3\u6566\u8BED": "ikt",
  "\u56E0\u7EBD\u7279\u8BED": "iu",
  "\u56E0\u7EBD\u7279\u8BED(\u62C9\u4E01\u8BED)": "iu-Latn",
  "\u7231\u5C14\u5170\u8BED": "ga",
  "\u610F\u5927\u5229\u8BED": "it",
  "\u65E5\u8BED": "ja",
  "\u5361\u7EB3\u8FBE\u8BED": "kn",
  "\u54C8\u8428\u514B\u8BED": "kk",
  "\u9AD8\u68C9\u8BED": "km",
  "\u514B\u6797\u8D21\u8BED": "tlh-Latn",
  "\u514B\u6797\u8D21\u8BED(plqaD)": "tlh-Piqd",
  "\u97E9\u8BED": "ko",
  "\u5E93\u5C14\u5FB7\u8BED(\u4E2D\u90E8)": "ku",
  "\u5E93\u5C14\u5FB7\u8BED(\u5317\u90E8)": "kmr",
  "\u5409\u5C14\u5409\u65AF\u8BED(\u897F\u91CC\u5C14\u8BED)": "ky",
  "\u8001\u631D\u8BED": "lo",
  "\u62C9\u8131\u7EF4\u4E9A\u8BED": "lv",
  "\u7ACB\u9676\u5B9B\u8BED": "lt",
  "\u9A6C\u5176\u987F\u8BED": "mk",
  "\u9A6C\u8FBE\u52A0\u65AF\u52A0\u8BED": "mg",
  "\u9A6C\u6765\u8BED(\u62C9\u4E01\u8BED\u7CFB)": "ms",
  "\u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED": "ml",
  "\u9A6C\u8033\u4ED6\u8BED": "mt",
  "\u6BDB\u5229\u8BED": "mi",
  "\u9A6C\u62C9\u5730\u8BED": "mr",
  "\u8499\u53E4\u8BED(\u897F\u91CC\u5C14\u6587)": "mn-Cyrl",
  "\u8499\u53E4\u8BED(\u4F20\u7EDF)": "mn-Mong",
  "\u7F05\u7538": "my",
  "\u5C3C\u6CCA\u5C14\u8BED": "ne",
  "\u632A\u5A01\u8BED": "nb",
  "\u5965\u91CC\u4E9A\u8BED": "or",
  "\u666E\u4EC0\u56FE\u8BED": "ps",
  "\u6CE2\u65AF\u8BED": "fa",
  "\u6CE2\u5170\u8BED": "pl",
  "\u8461\u8404\u7259\u8BED\uFF08\u5DF4\u897F\uFF09": "pt",
  "\u8461\u8404\u7259\u8BED(\u8461\u8404\u7259)": "pt-pt",
  "\u65C1\u906E\u666E\u8BED": "pa",
  "\u514B\u96F7\u5854\u7F57\u5965\u6258\u7C73\u8BED": "otq",
  "\u7F57\u9A6C\u5C3C\u4E9A\u8BED": "ro",
  "\u4FC4\u8BED": "ru",
  "\u8428\u6469\u4E9A\u8BED(\u62C9\u4E01\u8BED)": "sm",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u897F\u91CC\u5C14\uFF09": "sr-Cyrl",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u62C9\u4E01\uFF09": "sr-Latn",
  "\u65AF\u6D1B\u4F10\u514B\u8BED": "sk",
  "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED": "sl",
  "\u7D22\u9A6C\u91CC\u8BED\uFF08\u963F\u62C9\u4F2F\u8BED\uFF09": "so",
  "\u897F\u73ED\u7259\u8BED": "es",
  "\u65AF\u74E6\u5E0C\u91CC\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "sw",
  "\u745E\u5178\u8BED": "sv",
  "\u5854\u5E0C\u63D0\u8BED": "ty",
  "\u6CF0\u7C73\u5C14\u8BED": "ta",
  "\u9791\u977C\u8BED\uFF08\u62C9\u4E01\u8BED\uFF09": "tt",
  "\u6CF0\u5362\u56FA\u8BED": "te",
  "\u6CF0\u8BED": "th",
  "\u85CF\u8BED": "bo",
  "\u63D0\u683C\u91CC\u5C3C\u4E9A\u8BED": "ti",
  "\u6C64\u52A0\u8BED": "to",
  "\u571F\u8033\u5176\u8BED": "tr",
  "\u571F\u5E93\u66FC\u8BED(\u62C9\u4E01\u8BED)": "tk",
  "\u4E4C\u514B\u5170\u8BED": "uk",
  "\u4E0A\u7D22\u5E03\u8BED": "hsb",
  "\u4E4C\u5C14\u90FD\u8BED": "ur",
  "\u7EF4\u543E\u5C14\u8BED\uFF08\u963F\u62C9\u4F2F\u8BED\uFF09": "ug",
  "\u4E4C\u5179\u522B\u514B\u8BED(\u62C9\u4E01\u8BED)": "uz",
  "\u8D8A\u5357\u8BED": "vi",
  "\u5A01\u5C14\u58EB\u8BED": "cy",
  "\u5C24\u5361\u5766\u739B\u96C5\u8BED": "yua",
  "\u7956\u9C81\u8BED": "zu"
};
var BAIDU_LANGUAGES = {
  \u963F\u62C9\u4F2F\u8BED: "ara",
  \u7231\u5C14\u5170\u8BED: "gle",
  \u5965\u514B\u8BED: "oci",
  \u963F\u5C14\u5DF4\u5C3C\u4E9A\u8BED: "alb",
  \u963F\u5C14\u53CA\u5229\u4E9A\u963F\u62C9\u4F2F\u8BED: "arq",
  \u963F\u80AF\u8BED: "aka",
  \u963F\u62C9\u8D21\u8BED: "arg",
  \u963F\u59C6\u54C8\u62C9\u8BED: "amh",
  \u963F\u8428\u59C6\u8BED: "asm",
  \u827E\u9A6C\u62C9\u8BED: "aym",
  \u963F\u585E\u62DC\u7586\u8BED: "aze",
  \u963F\u65AF\u56FE\u91CC\u4E9A\u65AF\u8BED: "ast",
  \u5965\u585E\u68AF\u8BED: "oss",
  \u7231\u6C99\u5C3C\u4E9A\u8BED: "est",
  \u5965\u6770\u5E03\u74E6\u8BED: "oji",
  \u5965\u91CC\u4E9A\u8BED: "ori",
  \u5965\u7F57\u83AB\u8BED: "orm",
  \u6CE2\u5170\u8BED: "pl",
  \u6CE2\u65AF\u8BED: "per",
  \u5E03\u5217\u5854\u5C3C\u8BED: "bre",
  \u5DF4\u4EC0\u57FA\u5C14\u8BED: "bak",
  \u5DF4\u65AF\u514B\u8BED: "baq",
  \u5DF4\u897F\u8461\u8404\u7259\u8BED: "pot",
  \u767D\u4FC4\u7F57\u65AF\u8BED: "bel",
  \u67CF\u67CF\u5C14\u8BED: "ber",
  \u90A6\u677F\u7259\u8BED: "pam",
  \u4FDD\u52A0\u5229\u4E9A\u8BED: "bul",
  \u5317\u65B9\u8428\u7C73\u8BED: "sme",
  \u5317\u7D22\u6258\u8BED: "ped",
  \u672C\u5DF4\u8BED: "bem",
  \u6BD4\u6797\u8BED: "bli",
  \u6BD4\u65AF\u62C9\u9A6C\u8BED: "bis",
  \u4FFE\u8DEF\u652F\u8BED: "bal",
  \u51B0\u5C9B\u8BED: "ice",
  \u6CE2\u65AF\u5C3C\u4E9A\u8BED: "bos",
  \u535A\u6770\u666E\u5C14\u8BED: "bho",
  \u695A\u74E6\u4EC0\u8BED: "chv",
  \u806A\u52A0\u8BED: "tso",
  \u4E39\u9EA6\u8BED: "dan",
  \u5FB7\u8BED: "de",
  \u9791\u977C\u8BED: "tat",
  \u63B8\u8BED: "sha",
  \u5FB7\u987F\u8BED: "tet",
  \u8FEA\u7EF4\u5E0C\u8BED: "div",
  \u4F4E\u5730\u5FB7\u8BED: "log",
  \u4FC4\u8BED: "ru",
  \u6CD5\u8BED: "fra",
  \u83F2\u5F8B\u5BBE\u8BED: "fil",
  \u82AC\u5170\u8BED: "fin",
  \u68B5\u8BED: "san",
  \u5F17\u7559\u5229\u8BED: "fri",
  \u5BCC\u62C9\u5C3C\u8BED: "ful",
  \u6CD5\u7F57\u8BED: "fao",
  \u76D6\u5C14\u8BED: "gla",
  \u521A\u679C\u8BED: "kon",
  \u9AD8\u5730\u7D22\u5E03\u8BED: "ups",
  \u9AD8\u68C9\u8BED: "hkm",
  \u683C\u9675\u5170\u8BED: "kal",
  \u683C\u9C81\u5409\u4E9A\u8BED: "geo",
  \u53E4\u5409\u62C9\u7279\u8BED: "guj",
  \u53E4\u5E0C\u814A\u8BED: "gra",
  \u53E4\u82F1\u8BED: "eno",
  \u74DC\u62C9\u5C3C\u8BED: "grn",
  \u97E9\u8BED: "kor",
  \u8377\u5170\u8BED: "nl",
  \u80E1\u5E15\u8BED: "hup",
  \u54C8\u5361\u94A6\u8BED: "hak",
  \u6D77\u5730\u8BED: "ht",
  \u9ED1\u5C71\u8BED: "mot",
  \u8C6A\u8428\u8BED: "hau",
  \u5409\u5C14\u5409\u65AF\u8BED: "kir",
  \u52A0\u5229\u897F\u4E9A\u8BED: "glg",
  \u52A0\u62FF\u5927\u6CD5\u8BED: "frn",
  \u52A0\u6CF0\u7F57\u5C3C\u4E9A\u8BED: "cat",
  \u6377\u514B\u8BED: "cs",
  \u5361\u62DC\u5C14\u8BED: "kab",
  \u5361\u7EB3\u8FBE\u8BED: "kan",
  \u5361\u52AA\u91CC\u8BED: "kau",
  \u5361\u8212\u6BD4\u8BED: "kah",
  \u5EB7\u74E6\u5C14\u8BED: "cor",
  \u79D1\u8428\u8BED: "xho",
  \u79D1\u897F\u5609\u8BED: "cos",
  \u514B\u91CC\u514B\u8BED: "cre",
  \u514B\u91CC\u7C73\u4E9A\u9791\u977C\u8BED: "cri",
  \u514B\u6797\u8D21\u8BED: "kli",
  \u514B\u7F57\u5730\u4E9A\u8BED: "hrv",
  \u514B\u4E18\u4E9A\u8BED: "que",
  \u514B\u4EC0\u7C73\u5C14\u8BED: "kas",
  \u5B54\u5361\u5C3C\u8BED: "kok",
  \u5E93\u5C14\u5FB7\u8BED: "kur",
  \u62C9\u4E01\u8BED: "lat",
  \u8001\u631D\u8BED: "lao",
  \u7F57\u9A6C\u5C3C\u4E9A\u8BED: "rom",
  \u62C9\u7279\u52A0\u83B1\u8BED: "lag",
  \u62C9\u8131\u7EF4\u4E9A\u8BED: "lav",
  \u6797\u5821\u8BED: "lim",
  \u6797\u52A0\u62C9\u8BED: "lin",
  \u5362\u5E72\u8FBE\u8BED: "lug",
  \u5362\u68EE\u5821\u8BED: "ltz",
  \u5362\u68EE\u5C3C\u4E9A\u8BED: "ruy",
  \u5362\u65FA\u8FBE\u8BED: "kin",
  \u7ACB\u9676\u5B9B\u8BED: "lit",
  \u7F57\u66FC\u4EC0\u8BED: "roh",
  \u7F57\u59C6\u8BED: "ro",
  \u903B\u8F91\u8BED: "loj",
  \u9A6C\u6765\u8BED: "may",
  \u7F05\u7538\u8BED: "bur",
  \u9A6C\u62C9\u5730\u8BED: "mar",
  \u9A6C\u62C9\u52A0\u65AF\u8BED: "mg",
  \u9A6C\u62C9\u96C5\u62C9\u59C6\u8BED: "mal",
  \u9A6C\u5176\u987F\u8BED: "mac",
  \u9A6C\u7ECD\u5C14\u8BED: "mah",
  \u8FC8\u8482\u5229\u8BED: "mai",
  \u66FC\u514B\u65AF\u8BED: "glv",
  \u6BDB\u91CC\u6C42\u65AF\u514B\u91CC\u5965\u5C14\u8BED: "mau",
  \u6BDB\u5229\u8BED: "mao",
  \u5B5F\u52A0\u62C9\u8BED: "ben",
  \u9A6C\u8033\u4ED6\u8BED: "mlt",
  \u82D7\u8BED: "hmn",
  \u632A\u5A01\u8BED: "nor",
  \u90A3\u4E0D\u52D2\u65AF\u8BED: "nea",
  \u5357\u6069\u5FB7\u8D1D\u83B1\u8BED: "nbl",
  \u5357\u975E\u8377\u5170\u8BED: "afr",
  \u5357\u7D22\u6258\u8BED: "sot",
  \u5C3C\u6CCA\u5C14\u8BED: "nep",
  \u8461\u8404\u7259\u8BED: "pt",
  \u65C1\u906E\u666E\u8BED: "pan",
  \u5E15\u76AE\u963F\u95E8\u6258\u8BED: "pap",
  \u666E\u4EC0\u56FE\u8BED: "pus",
  \u9F50\u5207\u74E6\u8BED: "nya",
  \u5951\u7EF4\u8BED: "twi",
  \u5207\u7F57\u57FA\u8BED: "chr",
  \u65E5\u8BED: "jp",
  \u745E\u5178\u8BED: "swe",
  \u8428\u4E01\u5C3C\u4E9A\u8BED: "srd",
  \u8428\u6469\u4E9A\u8BED: "sm",
  "\u585E\u5C14\u7EF4\u4E9A-\u514B\u7F57\u5730\u4E9A\u8BED": "sec",
  \u585E\u5C14\u7EF4\u4E9A\u8BED: "srp",
  \u6851\u6D77\u8BED: "sol",
  \u50E7\u4F3D\u7F57\u8BED: "sin",
  \u4E16\u754C\u8BED: "epo",
  \u4E66\u9762\u632A\u5A01\u8BED: "nob",
  \u65AF\u6D1B\u4F10\u514B\u8BED: "sk",
  \u65AF\u6D1B\u6587\u5C3C\u4E9A\u8BED: "slo",
  \u65AF\u74E6\u5E0C\u91CC\u8BED: "swa",
  "\u585E\u5C14\u7EF4\u4E9A\u8BED\uFF08\u897F\u91CC\u5C14\uFF09": "src",
  \u7D22\u9A6C\u91CC\u8BED: "som",
  \u6CF0\u8BED: "th",
  \u571F\u8033\u5176\u8BED: "tr",
  \u5854\u5409\u514B\u8BED: "tgk",
  \u6CF0\u7C73\u5C14\u8BED: "tam",
  \u4ED6\u52A0\u7984\u8BED: "tgl",
  \u63D0\u683C\u5229\u5C3C\u4E9A\u8BED: "tir",
  \u6CF0\u5362\u56FA\u8BED: "tel",
  \u7A81\u5C3C\u65AF\u963F\u62C9\u4F2F\u8BED: "tua",
  \u571F\u5E93\u66FC\u8BED: "tuk",
  \u4E4C\u514B\u5170\u8BED: "ukr",
  \u74E6\u9686\u8BED: "wln",
  \u5A01\u5C14\u58EB\u8BED: "wel",
  \u6587\u8FBE\u8BED: "ven",
  \u6C83\u6D1B\u592B\u8BED: "wol",
  \u4E4C\u5C14\u90FD\u8BED: "urd",
  \u897F\u73ED\u7259\u8BED: "spa",
  \u5E0C\u4F2F\u6765\u8BED: "heb",
  \u5E0C\u814A\u8BED: "el",
  \u5308\u7259\u5229\u8BED: "hu",
  \u897F\u5F17\u91CC\u65AF\u8BED: "fry",
  \u897F\u91CC\u897F\u4E9A\u8BED: "sil",
  \u5E0C\u5229\u76D6\u519C\u8BED: "hil",
  \u4E0B\u7D22\u5E03\u8BED: "los",
  \u590F\u5A01\u5937\u8BED: "haw",
  \u65B0\u632A\u5A01\u8BED: "nno",
  \u897F\u975E\u4E66\u9762\u8BED: "nqo",
  \u4FE1\u5FB7\u8BED: "snd",
  \u4FEE\u7EB3\u8BED: "sna",
  \u5BBF\u52A1\u8BED: "ceb",
  \u53D9\u5229\u4E9A\u8BED: "syr",
  \u5DFD\u4ED6\u8BED: "sun",
  \u82F1\u8BED: "en",
  \u5370\u5730\u8BED: "hi",
  \u5370\u5C3C\u8BED: "id",
  \u610F\u5927\u5229\u8BED: "it",
  \u8D8A\u5357\u8BED: "vie",
  \u610F\u7B2C\u7EEA\u8BED: "yid",
  \u56E0\u7279\u8BED: "ina",
  \u4E9A\u9F50\u8BED: "ach",
  \u5370\u53E4\u4EC0\u8BED: "ing",
  \u4F0A\u535A\u8BED: "ibo",
  \u4F0A\u591A\u8BED: "ido",
  \u7EA6\u9C81\u5DF4\u8BED: "yor",
  \u4E9A\u7F8E\u5C3C\u4E9A\u8BED: "arm",
  \u4F0A\u52AA\u514B\u63D0\u56FE\u7279\u8BED: "iku",
  \u4F0A\u6717\u8BED: "ir",
  \u7B80\u4F53\u4E2D\u6587: "zh",
  \u7E41\u4F53\u4E2D\u6587: "cht",
  \u6587\u8A00\u6587: "wyw",
  \u4E2D\u6587\u7CA4\u8BED: "yue",
  \u624E\u624E\u5176\u8BED: "zaz",
  \u4E2D\u53E4\u6CD5\u8BED: "frm",
  \u7956\u9C81\u8BED: "zul",
  \u722A\u54C7\u8BED: "jav"
};
function getLanguageOptions(languages) {
  return Object.keys(languages).reduce((obj, key) => __spreadProps(__spreadValues({}, obj), {
    [languages[key]]: `${key}-${languages[key]}`
  }), {});
}
function isObject(obj) {
  return obj !== null && Object.prototype.toString.call(obj) === "[object Object]";
}
function isEmptyObject(obj = {}) {
  return isObject(obj) && Object.keys(obj).length < 1;
}
function validator(items, cb) {
  const errorMessages = items.filter((item) => !item.value).map((item) => item.message);
  if (errorMessages.length) {
    noticeHandler(errorMessages.join(", "));
    return;
  } else {
    cb();
  }
}

// settings.ts
var SETTING_BLOCKS = [
  {
    title: "Youdao Translator Settings",
    desc: [
      { type: "text", text: "Before using this plugin, you need browse to " },
      { type: "href", href: "https://ai.youdao.com/#/", text: "https://ai.youdao.com/#/" },
      { type: "text", text: "to register first!" }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the youdao translator service.",
        type: "toggle",
        key: "youdaoEnable",
        default: true
      },
      {
        name: "AppId",
        desc: "Please set your app id.",
        type: "text",
        key: "appId",
        default: ""
      },
      {
        name: "SecretKey",
        desc: "Please set your secret id.",
        type: "text",
        key: "secretKey",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "yFrom",
        default: "en",
        options: getLanguageOptions(LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "yTo",
        default: "zh-CHS",
        options: getLanguageOptions(LANGUAGES)
      },
      {
        name: "Audio",
        desc: "Whether to enable the audio function?",
        type: "toggle",
        key: "audio",
        default: false
      }
    ]
  },
  {
    title: "Microsoft Translator Settings",
    desc: [
      { type: "text", text: "For more infomation on using it, refer to " },
      {
        type: "href",
        href: "https://docs.microsoft.com/zh-cn/azure/cognitive-services/translator/quickstart-translator",
        text: "https://docs.microsoft.com/zh-cn/azure/cognitive-services/translator/quickstart-translator"
      },
      { type: "text", text: "." }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the Microsoft translator service.",
        type: "toggle",
        key: "microsoftEnable",
        default: false
      },
      {
        name: "SecretKey",
        desc: "Please set your secret key.",
        type: "text",
        key: "microsoftSecretKey",
        default: ""
      },
      {
        name: "Location",
        desc: "Please set your transaction service location.",
        type: "text",
        key: "microsoftLocation",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "mFrom",
        default: "en",
        options: getLanguageOptions(MICROSOFT_LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "mTo",
        default: "zh-Hans",
        options: getLanguageOptions(MICROSOFT_LANGUAGES)
      }
    ]
  },
  {
    title: "Baidu Translator Settings",
    desc: [
      { type: "text", text: "Before using this plugin, you need browse to " },
      { type: "href", href: "http://api.fanyi.baidu.com/", text: "http://api.fanyi.baidu.com/" },
      { type: "text", text: "to register first!" }
    ],
    settings: [
      {
        name: "Enable",
        desc: "Enable the baidu translator service.",
        type: "toggle",
        key: "baiduEnable",
        default: true
      },
      {
        name: "AppId",
        desc: "Please set your baidu app id.",
        type: "text",
        key: "baiduAppId",
        default: ""
      },
      {
        name: "SecretKey",
        desc: "Please set your baidu secret id.",
        type: "text",
        key: "baiduSecretKey",
        default: ""
      },
      {
        name: "From",
        desc: "Choose which language you wanna translate from.",
        type: "select",
        key: "bFrom",
        default: "en",
        options: getLanguageOptions(BAIDU_LANGUAGES)
      },
      {
        name: "To",
        desc: "Choose which language you wanna translate into.",
        type: "select",
        key: "bTo",
        default: "zh",
        options: getLanguageOptions(BAIDU_LANGUAGES)
      }
    ]
  }
];
function createDesc(container, desc) {
  const descEl = container.createEl("p", { cls: "transaction_container-desc" });
  desc.forEach(({ type, text, href }) => {
    switch (type) {
      case "text":
        descEl.appendText(text);
        break;
      case "href":
        descEl.appendChild(createEl("a", {
          text,
          href
        }));
        break;
    }
  });
}
var TranslatorSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Translator Settings" });
    SETTING_BLOCKS.forEach(({ title, settings, desc }) => {
      containerEl.createEl("h6", { text: title });
      desc && createDesc(containerEl, desc);
      settings.forEach((set) => {
        const { name, desc: desc2, type, key, default: defaultValue, options } = set;
        const el = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc2);
        const val = this.plugin.settings[key];
        switch (type) {
          case "text":
            el.addText((text) => text.setPlaceholder(name).setValue(val || defaultValue).onChange((value) => __async(this, null, function* () {
              this.plugin.settings[key] = value.trim();
              yield this.plugin.saveSettings();
            })));
            break;
          case "select":
            el.addDropdown((dp) => dp.addOptions(options).setValue(val || defaultValue).onChange((value) => __async(this, null, function* () {
              this.plugin.settings[key] = value;
              yield this.plugin.saveSettings();
            })));
            break;
          case "toggle":
            el.addToggle((tg) => {
              tg.setValue(val === void 0 ? defaultValue : val).onChange((value) => __async(this, null, function* () {
                this.plugin.settings[key] = value;
                yield this.plugin.saveSettings();
              }));
            });
            break;
          default:
            break;
        }
      });
    });
  }
};

// modals.ts
var import_obsidian3 = __toModule(require("obsidian"));
var LANGUAGES_MAP = {
  youdao: { key: "yTo", languages: LANGUAGES },
  microsoft: { key: "mTo", languages: MICROSOFT_LANGUAGES },
  baidu: { key: "bTo", languages: BAIDU_LANGUAGES }
};
var TranslatorModal = class extends import_obsidian3.Modal {
  constructor(app, text, settings) {
    super(app);
    this.text = text;
    this.empty = createEl("div", {
      cls: "translator_container-empty",
      text: "No results!"
    });
    this.settings = settings;
    this.text = text;
    this.customTo = {
      "youdao": "zh-CHS",
      "microsoft": "zh-Hans",
      "baidu": "zh"
    };
    this.customToPre = {};
  }
  createBlockTitleElement(containerEl, title, type) {
    const { languages } = LANGUAGES_MAP[type];
    const options = getLanguageOptions(languages);
    const titleContainer = containerEl.appendChild(createDiv({
      text: title,
      cls: `translator_container-block-title translator_container-block-title-${type}`
    }));
    new import_obsidian3.Setting(titleContainer).addDropdown((dp) => dp.addOptions(options).setValue(this.customTo[type]).onChange((value) => {
      this.customTo[type] = value;
    }));
  }
  translateResultsGenerator(contentObject, container) {
    Object.keys(contentObject).forEach((key) => {
      container.appendChild(createEl("p", {
        cls: `translator_container-${key}`,
        text: contentObject[key]
      }));
    });
  }
  createLoadingElement() {
    return createEl("div", {
      cls: "translator_container-overlay",
      text: "Translating..."
    });
  }
  youdaoTranslateHandler(containerEl) {
    const { yTo: to, yFrom: from, appId, secretKey, audio } = this.settings;
    const preMessage = `Youdao translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: appId, message: `${preMessage} appId ${lastMessage}` },
      { value: secretKey, message: `${preMessage} secretKey ${lastMessage}` }
    ], () => {
      const loadingEl = this.createLoadingElement();
      this.createBlockTitleElement(containerEl, "Youdao translation results", "youdao");
      containerEl.appendChild(loadingEl);
      handleTranslate(this.text, { to: this.customTo.youdao || to, appId, secretKey, from }, (data) => {
        containerEl.removeChild(loadingEl);
        if (isEmptyObject(data)) {
          containerEl.appendChild(this.empty);
        } else {
          const { query, translation, web, basic, l, webdict, tSpeakUrl, speakUrl } = data;
          const [FROM, TO] = l.split("2");
          containerEl.appendChild(createEl("a", {
            cls: "translator_container-title",
            text: query,
            href: webdict ? webdict.url : ""
          }));
          const audioesContainer = createEl("div", { cls: "translator_container-audioes" });
          if (audio) {
            const speakUrls = { origin: speakUrl, result: tSpeakUrl };
            Object.keys(speakUrls).forEach((key) => {
              new import_obsidian3.Setting(audioesContainer).setName(`${key}:`).addButton((btn) => {
                btn.setIcon("audio-file").onClick(() => {
                  document.getElementById(key).play();
                });
              });
              handleAudio(speakUrls[key], (res) => {
                audioesContainer.appendChild(createEl("div", {
                  cls: "translator_container-player"
                }));
                audioesContainer.appendChild(createEl("audio", {
                  attr: {
                    src: URL.createObjectURL(new Blob([res.arrayBuffer], { type: "audio/mp3" })),
                    id: key
                  }
                }));
              });
            });
            containerEl.appendChild(audioesContainer);
          }
          if (basic) {
            let symbolText = basic.phonetic ? `[${basic.phonetic}]` : "";
            if (FROM === "en" && TO === "zh-CHS") {
              symbolText = `${basic["us-phonetic"] ? `us: [${basic["us-phonetic"]}]` : ""}
    ${basic["uk-phonetic"] ? `uk: [${basic["uk-phonetic"]}]` : ""}`;
            }
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-soundmark",
              text: symbolText
            }));
            const explains = FROM === "zh-CHS" && TO === "en" ? [...translation, basic.explains.toString()] : basic.explains;
            explains.forEach((exp) => {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-explain",
                text: exp
              }));
            });
            if (basic.wfs) {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-title",
                text: "Word forms"
              }));
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-wfs",
                text: basic.wfs.map((item) => `${item.wf.name}: ${item.wf.value}`).join(", ")
              }));
            }
          } else {
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-explain",
              text: translation == null ? void 0 : translation.toString()
            }));
          }
          if (web) {
            containerEl.appendChild(createEl("p", {
              cls: "translator_container-title",
              text: "Other translations"
            }));
            web.forEach((item) => {
              containerEl.appendChild(createEl("p", {
                cls: "translator_container-other",
                text: `${item.key}: ${item.value.toString()}`
              }));
            });
          }
        }
      });
    });
  }
  microsoftTranslateHandler(containerEl) {
    const loadingEl = this.createLoadingElement();
    const { mTo: to, mFrom: from, microsoftSecretKey, microsoftLocation } = this.settings;
    const preMessage = `Microsoft translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: microsoftSecretKey, message: `${preMessage} secret key ${lastMessage}` },
      { value: microsoftLocation, message: `${preMessage} location ${lastMessage}` }
    ], () => {
      this.createBlockTitleElement(containerEl, "Microsoft translation results", "microsoft");
      containerEl.appendChild(loadingEl);
      handleMicrosoftTranslate(this.text, {
        to: this.customTo.microsoft || to,
        from,
        secretKey: microsoftSecretKey,
        location: microsoftLocation
      }, (res) => {
        containerEl.removeChild(loadingEl);
        const contentObj = {
          title: this.text,
          explain: res
        };
        this.translateResultsGenerator(contentObj, containerEl);
      });
    });
  }
  baiduTranslateHandler(containerEl) {
    const { bTo: to, bFrom: from, baiduAppId, baiduSecretKey } = this.settings;
    const preMessage = `Baidu translation service's`;
    const lastMessage = `shouldn't be empty.`;
    validator([
      { value: baiduAppId, message: `${preMessage} appId ${lastMessage}` },
      { value: baiduSecretKey, message: `${preMessage} secretKey ${lastMessage}` }
    ], () => {
      const loadingEl = this.createLoadingElement();
      this.createBlockTitleElement(containerEl, "Baidu translation results", "baidu");
      containerEl.appendChild(loadingEl);
      handleBaiduTranslate(this.text, { to: this.customTo.baidu || to, appId: baiduAppId, secretKey: baiduSecretKey, from }, (res) => {
        if (isEmptyObject(res)) {
          containerEl.appendChild(this.empty);
        } else {
          const { trans_result, error_code } = res;
          if (trans_result) {
            containerEl.removeChild(loadingEl);
            const resData = trans_result.map(({ src, dst }) => ({
              title: src,
              explain: dst
            }));
            resData.forEach((contentObj) => {
              this.translateResultsGenerator(contentObj, containerEl);
            });
          } else {
            noticeHandler(`No results! (Code ${error_code})`);
          }
        }
      });
    });
  }
  translate(containerEls) {
    Object.keys(containerEls).forEach((key) => {
      const type = key.replace("Enable", "");
      if (this.text !== this.prevText || this.customTo[type] !== this.customToPre[type]) {
        const containerEl = containerEls[key];
        containerEl.empty();
        switch (key) {
          case "youdaoEnable": {
            this.youdaoTranslateHandler(containerEl);
            break;
          }
          case "microsoftEnable": {
            this.microsoftTranslateHandler(containerEl);
            break;
          }
          case "baiduEnable": {
            this.baiduTranslateHandler(containerEl);
            break;
          }
          default:
            break;
        }
        this.customToPre[type] = this.customTo[type];
      }
    });
    this.prevText = this.text;
  }
  onOpen() {
    const { contentEl, settings } = this;
    const enableKeys = Object.keys(settings).filter((key) => key.toLowerCase().includes("enable") && settings[key]);
    contentEl.createEl("h1", { text: "Translator", cls: "translator_title" });
    const setting = new import_obsidian3.Setting(contentEl).setClass("translator_search").addText((text) => text.setValue(this.text).setPlaceholder("To be translated").onChange((value) => {
      this.text = value;
    }));
    const containerEls = enableKeys.reduce((els, key) => __spreadProps(__spreadValues({}, els), { [key]: contentEl.createDiv({ cls: `translator_container translator_container-${key.replace("Enable", "")}` }) }), {});
    const translatorHandler = () => {
      if (this.text) {
        this.translate(containerEls);
      } else {
        Object.values(containerEls).forEach((el) => el.empty());
      }
    };
    setting.addButton((btn) => btn.setIcon("search").setCta().onClick(translatorHandler));
    if (document) {
      document.onkeydown = (event) => {
        event && event.keyCode === 13 && translatorHandler();
      };
    }
    this.text && this.translate(containerEls);
  }
  onClose() {
    this.contentEl.empty();
    this.text = this.prevText = "";
  }
};

// main.ts
var DEFAULT_SETTINGSF = {
  youdaoEnable: false,
  appId: "",
  secretKey: "",
  yFrom: "",
  yTo: "",
  audio: false,
  microsoftEnable: false,
  microsoftSecretKey: "",
  microsoftLocation: "",
  mFrom: "",
  mTo: "",
  baiduEnable: false,
  baiduSecretKey: "",
  baiduAppId: "",
  bFrom: "",
  bTo: ""
};
var TranslatorPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new TranslatorSettingTab(this.app, this));
      this.addRibbonIcon("book", "Translate", () => {
        this.app.commands.executeCommandById("obsidian-translator:translate");
      });
      const validator2 = () => {
        const {
          youdaoEnable,
          appId,
          secretKey,
          baiduAppId,
          baiduEnable,
          baiduSecretKey,
          microsoftEnable,
          microsoftLocation,
          microsoftSecretKey
        } = this.settings;
        const getKeys = (obj) => {
          return Object.keys(obj).filter((key) => !obj[key]);
        };
        const getRes = (enable, idOrLocation, key) => enable && !!idOrLocation && !!key || !enable;
        const validateFailedList = [
          ...getRes(youdaoEnable, appId, secretKey) ? [] : getKeys({ appId, secretKey }),
          ...getRes(baiduEnable, baiduAppId, baiduSecretKey) ? [] : getKeys({ baiduAppId, baiduSecretKey }),
          ...getRes(microsoftEnable, microsoftLocation, microsoftSecretKey) ? [] : getKeys({ microsoftLocation, microsoftSecretKey })
        ];
        return validateFailedList;
      };
      this.addCommand({
        id: "translate",
        name: "translate",
        editorCallback: (editor) => {
          const { settings } = this;
          const enableKeys = Object.keys(settings).filter((key) => key.toLowerCase().includes("enable") && settings[key]);
          if (enableKeys.length) {
            const messages = validator2();
            if (!messages.length) {
              const sel = editor.getSelection();
              new TranslatorModal(this.app, sel, settings).open();
            } else {
              noticeHandler(`${messages.join(", ")} can not be empty!`);
            }
          }
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      const settings = yield this.loadData();
      this.settings = __spreadValues(__spreadValues({}, DEFAULT_SETTINGSF), settings || {});
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
