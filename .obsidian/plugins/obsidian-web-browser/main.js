/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/header_bar.ts
var HeaderBar = class {
  constructor(parent) {
    this.onSearchBarEnterListener = new Array();
    parent.addClass("web-browser-header-bar");
    parent.removeChild(parent.children[1]);
    this.searchBar = document.createElement("input");
    this.searchBar.type = "text";
    this.searchBar.placeholder = "Search with DuckDuckGo or enter address";
    this.searchBar.addClass("web-browser-search-bar");
    parent.appendChild(this.searchBar);
    this.searchBar.addEventListener("keydown", (event) => {
      if (!event) {
        var event = window.event;
      }
      if (event.key === "Enter") {
        for (var listener of this.onSearchBarEnterListener) {
          listener(this.searchBar.value);
        }
      }
    }, false);
  }
  addOnSearchBarEnterListener(listener) {
    this.onSearchBarEnterListener.push(listener);
  }
  setSearchBarUrl(url) {
    this.searchBar.value = url;
  }
};

// src/web_browser_view.ts
var import_obsidian = require("obsidian");
var WEB_BROWSER_VIEW_ID = "web-browser-view";
var WebBrowserView = class extends import_obsidian.ItemView {
  constructor() {
    super(...arguments);
    this.currentTitle = "New tab";
  }
  static spawnWebBrowserView(newLeaf, state) {
    app.workspace.getLeaf(newLeaf).setViewState({ type: WEB_BROWSER_VIEW_ID, active: true, state });
  }
  getDisplayText() {
    return this.currentTitle;
  }
  getViewType() {
    return WEB_BROWSER_VIEW_ID;
  }
  async onOpen() {
    this.navigation = true;
    this.contentEl.empty();
    this.headerBar = new HeaderBar(this.headerEl.children[2]);
    this.favicon = document.createElement("img");
    this.favicon.width = 16;
    this.favicon.height = 16;
    this.frame = document.createElement("webview");
    this.frame.setAttribute("allowpopups", "");
    this.frame.addClass("web-browser-frame");
    this.contentEl.addClass("web-browser-view-content");
    this.contentEl.appendChild(this.frame);
    this.headerBar.addOnSearchBarEnterListener((url) => {
      this.navigate(url);
    });
    this.frame.addEventListener("dom-ready", (event) => {
      const { remote } = require("electron");
      remote.webContents.fromId(this.frame.getWebContentsId()).setWindowOpenHandler((event2) => {
        WebBrowserView.spawnWebBrowserView(true, { url: event2.url });
      });
    });
    this.frame.addEventListener("page-favicon-updated", (event) => {
      this.favicon.src = event.favicons[0];
      this.leaf.tabHeaderInnerIconEl.empty();
      this.leaf.tabHeaderInnerIconEl.appendChild(this.favicon);
    });
    this.frame.addEventListener("page-title-updated", (event) => {
      this.leaf.tabHeaderInnerTitleEl.innerText = event.title;
      this.currentTitle = event.title;
    });
    this.frame.addEventListener("will-navigate", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("did-navigate-in-page", (event) => {
      this.navigate(event.url, true, false);
    });
    this.frame.addEventListener("new-window", (event) => {
      console.log("Trying to open new window at url: " + event.url);
      event.preventDefault();
    });
  }
  async setState(state, result) {
    this.navigate(state.url, false);
  }
  getState() {
    return { url: this.currentUrl };
  }
  navigate(url, addToHistory = true, updateWebView = true) {
    var _a, _b, _c;
    if (url === "") {
      return;
    }
    if (addToHistory) {
      if (((_c = (_b = (_a = this.leaf.history.backHistory.last()) == null ? void 0 : _a.state) == null ? void 0 : _b.state) == null ? void 0 : _c.url) !== this.currentUrl) {
        this.leaf.history.backHistory.push({
          state: {
            type: WEB_BROWSER_VIEW_ID,
            state: this.getState()
          },
          title: this.currentTitle,
          icon: "search"
        });
        this.headerEl.children[1].children[0].setAttribute("aria-disabled", "false");
      }
    }
    var urlRegEx = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi;
    if (urlRegEx.test(url)) {
      let first7 = url.slice(0, 7).toLowerCase();
      let first8 = url.slice(0, 8).toLowerCase();
      if (!(first7 === "http://" || first7 === "file://" || first8 === "https://")) {
        url = "https://" + url;
      }
    } else {
      url = "https://duckduckgo.com/?q=" + url;
    }
    this.currentUrl = url;
    this.headerBar.setSearchBarUrl(url);
    if (updateWebView) {
      this.frame.setAttribute("src", url);
    }
    app.workspace.requestSaveLayout();
  }
};

// src/hooks.ts
var FunctionHooks = class {
  static onload() {
    FunctionHooks.ogWindow$Open = window.open;
    window.open = (url, target, features) => {
      let urlString = "";
      if (typeof url === "string") {
        urlString = url;
      } else if (url instanceof URL) {
        urlString = url.toString();
      }
      if (urlString === "about:blank" && features) {
        return FunctionHooks.ogWindow$Open.call(window, url, target, features);
      }
      WebBrowserView.spawnWebBrowserView(true, { url: urlString });
      return null;
    };
  }
  static onunload() {
    window.open = FunctionHooks.ogWindow$Open;
  }
};

// src/main.ts
var MyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(WEB_BROWSER_VIEW_ID, (leaf) => new WebBrowserView(leaf));
    FunctionHooks.onload();
    this.onLayoutChangeEventRef = this.app.workspace.on("layout-change", () => {
      var activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.ItemView);
      if (activeView) {
        if (activeView.contentEl.children[0].hasClass("empty-state")) {
          if (!activeView.headerEl.children[2].hasClass("web-browser-header-bar")) {
            var headerBar = new HeaderBar(activeView.headerEl.children[2]);
            headerBar.addOnSearchBarEnterListener((url) => {
              WebBrowserView.spawnWebBrowserView(false, { url });
            });
          }
        }
      }
    });
  }
  onunload() {
    var _a;
    this.app.workspace.detachLeavesOfType(WEB_BROWSER_VIEW_ID);
    FunctionHooks.onunload();
    this.app.workspace.offref(this.onLayoutChangeEventRef);
    var searchBars = document.getElementsByClassName("web-browser-search-bar");
    while (searchBars.length > 0) {
      (_a = searchBars[0].parentElement) == null ? void 0 : _a.removeChild(searchBars[0]);
    }
  }
  async loadSettings() {
  }
  async saveSettings() {
  }
};
//# sourceMappingURL=data:application/json;base64,
