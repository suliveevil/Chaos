#+TITLE: Guide for developers
#+AUTHOR: Chen Bin (redguardtoo)
#+LANGUAGE: en
#+TEXINFO_DIR_CATEGORY: Emacs
#+OPTIONS: ^:{} toc:nil H:5 num:0
#+OPTIONS: ^:{}
* Introduction
This article helps developers start using Emacs as easily as possible on Linux/Windows/macOS.

Easy/light/good solutions are provided instead of difficult/heavy/perfect solutions.
* Table of Content                                                              :noexport:TOC:
- [[#introduction][Introduction]]
- [[#code-completion][Code completion]]
- [[#code-navigation][Code navigation]]
- [[#language-server-protocol][Language Server Protocol]]
- [[#editing][Editing]]
- [[#git][Git]]
- [[#syntax-check][Syntax check]]
- [[#compile][Compile]]
- [[#debug][Debug]]
- [[#documentation][Documentation]]
- [[#clipboard][Clipboard]]
- [[#find-file-and-grep-text][Find file and grep text]]
- [[#sub-windows][Sub-windows]]
- [[#execute-command][Execute command]]
- [[#code-template][Code template]]

* Code completion
It's difficult to setup [[http://cedet.sourceforge.net/][Cedet]]. Use [[https://github.com/company-mode/company-mode][company-mode]] instead.

If the C++/Java project is huge (100,000 files for example). Use =company-gtags= from =company-mode=. [[https://www.gnu.org/software/global/][GNU Global]] create tags file for =company-gtags=.

=company-etags= from =company-mode= could be used to replace =company-gtags=. It's slower than =company-gtags=. It can handle 10,000 files. =Ctags= is used to create tags file. [[https://github.com/universal-ctags/ctags][Universal-Ctags]] is more actively maintained than [[http://ctags.sourceforge.net/][Exuberant Ctags]].

My [[https://gist.github.com/redguardtoo/b12ddae3b8010a276e9b][~/.ctags]].
* Code navigation
Use [[https://github.com/syohex/emacs-counsel-gtags][counsel-gtags]] if =company-gtags= is already used.

Use [[https://github.com/redguardtoo/counsel-etags][counsel-etags]] if =company-etags= is already used.

Exclude patterns can be used to filter the candidates. For example, input "k1 !neg1 neg2" means candidates should contain string "k1" but neither "neg1" or "neg2".
* Language Server Protocol
Right now [[https://www.emacswiki.org/emacs/LanguageServerProtocol][Language Server Protocol]] is very popular. It provides code completion, code navigation , and many other features. It could be a bit slower than more light weight solutions.

But in Emacs world, you could use multiple solutions at the same time. For example, you could use =company-gtags= from =company-mode= AND =company-capf= from [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode]] in one project. See the documentation of =company-backends= of =company-mode= for details.
* Editing
Use [[https://github.com/emacs-evil/evil][Evil]] because most time your are moving cursor in left/right/up/down direction. Evil (Vim emulator) uses =hjkl= to do these things.

Evil also gives you chance to use advanced editing techniques like [[http://vimdoc.sourceforge.net/htmldoc/motion.html#object-select][Vim text objects]].

Evil is even better than Vim because you can use Emacs Lisp to create your own text object. It's truly black magic because you can combine the power of Emacs and Vim.
* Git
Most people prefer [[https://magit.vc/][Magit]] though CLI Git is good enough for me (My [[https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0][~/.gitconfig]]).

[[https://github.com/syohex/emacs-git-gutter][git-gutter]] can display diff hunks in current buffer.

The API =git-gutter:set-start-revisio= from =git-gutter= is very useful.

For example, I created two commands =git-gutter-reset-to-header-parent= and =git-gutter-reset-to-default=. =git-gutter-reset-to-header-parent= display the hunks of HEAD commit. =git-gutter-reset-to-default= reset the =git-gutter= to its default status:
#+begin_src elisp
(require 'git-gutter)

(defun git-gutter-reset-to-head-parent()
  (interactive)
  (let (parent (filename (buffer-file-name)))
    (if (eq git-gutter:vcs-type 'svn)
        (setq parent "PREV")
      (setq parent (if filename (concat (shell-command-to-string (concat "git --no-pager log --oneline -n1 --pretty=\"format:%H\" " filename)) "^") "HEAD^")))
    (git-gutter:set-start-revision parent)
    (message "git-gutter:set-start-revision HEAD^")))

(defun git-gutter-reset-to-default ()
  (interactive)
  (git-gutter:set-start-revision nil)
  (message "git-gutter reset"))
#+end_src

* Syntax check
Use either built in Flymake or [[https://www.flycheck.org/][Flycheck]].

If you use Flymake, read documentation =flymake-allowed-file-name-masks=.
* Compile
Assign some convenient shortcut to =M-x compile=. Learn how to setup =compile-comand=,
#+begin_src elisp
(setq compile-command "cd ~/projs/proj1 && make && make test")
#+end_src

* Debug
Try =M-x gud-gdb= which is solid.

Setup shortcut for =M-x gud-run=.

=Gud= and =dired= could be programmatically changed, so you can jump to the directory of executable easily.
* Documentation
Google =keyword1 keyword2 site:stackoverflow.com= or google =keyword1 keyword2 site:github.com filetype:el=.
* Clipboard
Use [[http://www.vergenet.net/~conrad/software/xsel/][xsel]] on Linux.

Use =pbcopy/pbpaste= on macOS.

Use =/dev/clipboard= on Cygwin.

Use =powershell.exe -command Get-Clipboard= and =clip.exe= on Windows 10.

You need know how to manipulate clipboard through command line for two reasons:
- Traditional way to paste from clipboard could be slow if clipboard content is huge
- Share clipboard between ssh server and client
* Find file and grep text
Install [[https://github.com/abo-abo/swiper][counsel/ivy/swiper]] (=counsel= is dependent on =swiper= while swiper is dependent =ivy=).

Make sure your project is using git.

=M-x counsel-git= to find file.

=M-x counsel-git-grep= to use [[https://git-scm.com/docs/git-grep][git-grep]] to grep text in project.

All developer will encounter the problem to find file with similar file name. C++ developers need find "window.hpp" from "window.cpp". Javascript developers need find "Component.test.js" from "Component.js".

The easiest solution is to sort the candidates from =counsel-git= by [[https://www.emacswiki.org/emacs/LevenshteinDistance][string distance]]. 

There are tons of handy commands from counsel/swiper/ivy (=counsel-imenu=, =counsel-recentf=, =counsel-ibuffer=, ...).

API =ivy-read= from =ivy= is very useful. Here is a simple demo on how to use =ivy-read=,

#+begin_src elisp
(require 'ivy)
(ivy-read "Your choice:"
          '("apple" "plum" "orange")
          :action (lambda (choice)
                    (message "I chose %s" choice)))
#+end_src
* Sub-windows
I usually open 4 sub-windows and use [[https://github.com/deb0ch/emacs-winum][winum]] to move cursor between sub-windows.

You need some package to save and load sub-windows layout. You can start from [[https://github.com/wasamasa/eyebrowse][eyebrowse]].
* Execute command
Run =M-x counsel-M-x= from =counsel=.
* Code template
I prefer using =yasnippet= independently instead of as a plugin of =company-mode=. So I don't need think, "OK this candidate is NOT from yasnippet, What I see is what to be inserted. That candidate IS from yasnippet, what I see is not what to be inserted".
